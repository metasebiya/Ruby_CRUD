//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 12/13/2019 11:44:48 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace CrudDbContext
{

    [DatabaseAttribute(Name = "crud_db")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class CrudDbDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(CrudDbDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertEmpTable(EmpTable instance);
        partial void UpdateEmpTable(EmpTable instance);
        partial void DeleteEmpTable(EmpTable instance);

        #endregion

        public CrudDbDataContext() :
        base(GetConnectionString("CrudDbDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public CrudDbDataContext(MappingSource mappingSource) :
        base(GetConnectionString("CrudDbDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public CrudDbDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CrudDbDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CrudDbDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CrudDbDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<EmpTable> EmpTables
        {
            get
            {
                return this.GetTable<EmpTable>();
            }
        }
    }
}

namespace CrudDbContext
{

    /// <summary>
    /// There are no comments for CrudDbContext.EmpTable in the schema.
    /// </summary>
    [Table(Name = @"crud_db.emp_table")]
    public partial class EmpTable : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _EmpId;

        private string _EmpName;

        private int _Salary;

        private string _Email;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnEmpIdChanging(int value);
        partial void OnEmpIdChanged();
        partial void OnEmpNameChanging(string value);
        partial void OnEmpNameChanged();
        partial void OnSalaryChanging(int value);
        partial void OnSalaryChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        #endregion

        public EmpTable()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for EmpId in the schema.
        /// </summary>
        [Column(Name = @"emp_id", Storage = "_EmpId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int EmpId
        {
            get
            {
                return this._EmpId;
            }
            set
            {
                if (this._EmpId != value)
                {
                    this.OnEmpIdChanging(value);
                    this.SendPropertyChanging("EmpId");
                    this._EmpId = value;
                    this.SendPropertyChanged("EmpId");
                    this.OnEmpIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmpName in the schema.
        /// </summary>
        [Column(Name = @"emp_name", Storage = "_EmpName", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string EmpName
        {
            get
            {
                return this._EmpName;
            }
            set
            {
                if (this._EmpName != value)
                {
                    this.OnEmpNameChanging(value);
                    this.SendPropertyChanging("EmpName");
                    this._EmpName = value;
                    this.SendPropertyChanged("EmpName");
                    this.OnEmpNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Salary in the schema.
        /// </summary>
        [Column(Name = @"salary", Storage = "_Salary", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Salary
        {
            get
            {
                return this._Salary;
            }
            set
            {
                if (this._Salary != value)
                {
                    this.OnSalaryChanging(value);
                    this.SendPropertyChanging("Salary");
                    this._Salary = value;
                    this.SendPropertyChanged("Salary");
                    this.OnSalaryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
